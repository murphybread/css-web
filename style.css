/* CSS Selectors: Understand and use different types of CSS selectors like class, ID, attribute, pseudo-class, and pseudo-element selectors. 
    기본적인 element ,  class, ID에대한 선택자 표기
    속성 선택자
    의사(pseudo)선택자의경우 특정 조건에 따라 표기된다. : 형태로 표현 예를들어 커서가 올라간 div태그 div:hover라던가 선택중인 input:foucs타입등은 의사 클래스
    또한 엘리멘트의 특정 요소만 표현시 :: 두개로 표현
    */

h1{
    font: bold 10px Arial

}

.class1{
    background-color: darkblue;

}

#id1{
    color: firebrick;

}

input[type=button]{
    width: 100%;

}


div:hover{
    color: yellow;

}

p::first-line { font-weight: bold; }


/* Box Model: Learn about the CSS box model which includes margins, borders, padding, and content. Understand how each element affects layout and design.
BOX모델 이해하기. 기본적으로 컨텐츠와 경계(border)가 있다. 그리고 이 경계와 컨텐츠 내부는 padding이라는 속성으로 사이즈를 컨트롤하고 경계와 바깥은 margin이라는 속성으로 사이즈를
컨트롤 한다. 웹페지에서 개발자도구(F12)를 통해 시각적으로 확인할 수 있으며, 크기를 조절하면서 볼 수도 있다.
*/


p {
    padding: 10rem;
    margin-bottom: 25rem;

}

/* Layout Techniques: Practice creating layouts using techniques like Flexbox and Grid. These are powerful tools for creating responsive and structured layouts.
    반응형 웹을 만들기위한 테크닉. flexbox는 한줄을 기준으로 가로나 세로로이동, Grid는 2차원 행과열을 사용

*/

.flex-container {
    display: flex; /* Flex 컨테이너 설정 */
    justify-content: center; /* 가로 방향 중앙 정렬 */
    width: 100%;
    height: 200px; /* 컨테이너 높이 설정 */
    background-color: crimson; /* 배경 색상 설정 */
  }
  
  .flex-item {
    flex: 1;
    background-color: aqua; /* 배경 색상 설정 */
    margin: 10px; /* 아이템 간 간격 설정 */
    text-align: center; /* 텍스트 중앙 정렬 */
    line-height: 50px; /* 텍스트 수직 중앙 정렬 */
  }
  


/* grid의 경우 일반적으로 자동확장, 균등분할같은 경우는 container만으로 가능하지만 아래와같이 특별한 패턴을 임의로설정하거나 할때는 item값도 써야함.
container의 경우전체 틀에대한 프로퍼티을 정의하고, item의 경우 각 셀에대한 레이아웃을 정의
*/
#grid-container{
    border:5px solid pink;
    display: grid;
    grid-template-columns: 1fr 1fr 1fr; /* 2열 그리드 */
    grid-template-rows: 1fr 1fr 1fr; /* 3행 그리드 */
    grid-template-areas: 
      "a . ."
      ". b ."
      ". . c";
  }
  #grid-item-a {
    grid-area: a;
    border: 5px solid red;
  }
  
  #grid-item-b {
    grid-area: b;
    border: 5px solid green;
  }
  
  #grid-item-c {
    grid-area: c;
    border: 5px solid blue;
  }


/*Responsive Design: Use media queries to create designs that adapt to different screen sizes and resolutions. This is crucial for building websites that work on both mobile and desktop devices.
  반응형 웹 즉 특정 조건에 따라 화면이 줄었다가 늘어나는 웹을 만드는데 미디어 쿼리 이용하면 가능하다
  @media로 시작하는 쿼리 안에 설정. 조건은 소괄호
  다음은 최대 800px일 떄 즉 크기가 작으면 p단락의 글씨를 키우는 미디어 쿼리

*/

@media(max-width:800px) {
    p{
      font-size: 100px
    }
  }